Index: src/main/java/by/sergeev/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package by.sergeev;\r\n\r\nimport by.sergeev.model.*;\r\nimport by.sergeev.util.Util;\r\n\r\nimport java.io.IOException;\r\nimport java.time.LocalDate;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\n\r\nimport static java.lang.System.out;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n        task1();\r\n        task2();\r\n        task3();\r\n        task4();\r\n        task5();\r\n        task6();\r\n        task7();\r\n        task8();\r\n        task9();\r\n        task10();\r\n        task11();\r\n        task12();\r\n        task13();\r\n        task14();\r\n        task15();\r\n    }\r\n\r\n    /*\r\n    Задача №1\r\n    - Из представленных животных отобрать все молодые особи от 10 до 20 лет\r\n     и отсортировать по возрасту (по возрастанию) далее - распределить по 7 на каждый зоопарк.\r\n     Зоопарков неограниченное кол-во,а вы - директор 3-го по счёту зоопарка.\r\n     Полученных животных вывести в консоль.\r\n     */\r\n    private static void task1() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final int MIN_AGE = 10;\r\n        final int MAX_AGE = 20;\r\n\r\n        out.println(\"\\nTask 1:\");\r\n        animals.stream().filter(x -> x.getAge() >= MIN_AGE && x.getAge() < MAX_AGE).sorted(Comparator.comparing(Animal::getAge)).skip(14).limit(7).forEach(out::println);\r\n    }\r\n\r\n    /*\r\n    Задача №2\r\n     - Отобрать всех животных из Японии (Japanese) и записать породу UPPER_CASE\r\n     если пол Female преобразовать к строкам породы животных и вывести в консоль\r\n     */\r\n    private static void task2() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final String BY_ORIGIN = \"Japanese\";\r\n        final String BY_GENDER = \"Female\";\r\n\r\n        out.println(\"\\nTask 2:\");\r\n\r\n        animals.stream().filter(x -> BY_ORIGIN.equalsIgnoreCase(x.getOrigin())).filter(x -> BY_GENDER.equalsIgnoreCase(x.getGender())).peek(x -> x.setBread(x.getBread().toUpperCase())).forEach(out::println);\r\n    }\r\n\r\n    /*\r\n    Задача №3\r\n     - Отобрать всех животных старше 30 лет и вывести все страны происхождения без дубликатов начинающиеся на \"A\"\r\n     */\r\n    private static void task3() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final int BY_AGE = 30;\r\n        final char BY_FIRST_CHAR = 'A';\r\n\r\n        out.println(\"\\nTask 3:\");\r\n\r\n        animals.stream().filter(x -> BY_AGE < x.getAge()).filter(x -> BY_FIRST_CHAR == x.getOrigin().toUpperCase().charAt(0)).map(x -> x.getOrigin()).distinct().sorted().forEach(out::println);\r\n    }\r\n\r\n    /*\r\n    Задача №4\r\n     - Подсчитать количество всех животных пола = Female. Вывести в консоль\r\n     */\r\n    private static void task4() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final String BY_GENDER = \"Female\";\r\n\r\n        out.println(\"\\nTask number 4:\");\r\n\r\n        long count = animals.stream().filter(x -> BY_GENDER.equalsIgnoreCase(x.getGender())).count();\r\n        out.println(\"Number of all sex animals \" + BY_GENDER + \" = \" + count);\r\n\r\n    }\r\n\r\n    /*\r\n    Задача №5\r\n    - Взять всех животных возрастом 20 - 30 лет. Есть ли среди них хоть один из страны Венгрия (Hungarian)?\r\n    Ответ вывести в консоль.\r\n     */\r\n    private static void task5() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final String BY_ORIGIN = \"Hungarian\";\r\n        final int MIN_AGE = 20;\r\n        final int MAX_AGE = 30;\r\n\r\n        out.println(\"\\nTask number 5:\");\r\n\r\n        boolean isOrigin = animals.stream().filter(x -> MIN_AGE <= x.getAge() && MAX_AGE >= x.getAge()).allMatch(x -> x.getOrigin().equalsIgnoreCase(BY_ORIGIN));\r\n\r\n        out.printf(\"In this country '%s' animals between %d and %d age : %b\\n\", BY_ORIGIN, MIN_AGE, MAX_AGE, isOrigin);\r\n    }\r\n\r\n    /*\r\n    Задача №6\r\n    -Взять всех животных. Все ли они пола Male или Female ? Ответ вывести в консоль.\r\n     */\r\n    private static void task6() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n\r\n        out.println(\"\\nTask number 6:\");\r\n\r\n        final boolean isGender = animals.stream().allMatch(x -> \"Male\".equalsIgnoreCase(x.getGender()) || \"Female\".equalsIgnoreCase(x.getGender()));\r\n\r\n        out.println(\"Are all animals Male or Female? Answer: \" + isGender);\r\n    }\r\n\r\n    /*\r\n    Задача №7\r\n    -Взять всех животных. Узнать что ни одно из них\r\n    не имеет страну происхождения Oceania. Ответ вывести в консоль.\r\n     */\r\n    private static void task7() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final String BY_COUNTRY = \"Oceania\";\r\n\r\n        out.println(\"\\nTask number 7:\");\r\n\r\n        boolean anyMatchAnimals = animals.stream().anyMatch(x -> BY_COUNTRY.equalsIgnoreCase(x.getOrigin()));\r\n\r\n        out.printf(\"Is there any animal that lives in %s? %b\\n\", BY_COUNTRY, anyMatchAnimals);\r\n    }\r\n\r\n    /*\r\n    Задача №8\r\n    - Взять всех животных. Отсортировать их породу в стандартном порядке и взять первые 100.\r\n    Вывести в консоль возраст самого старого животного.\r\n     */\r\n    private static void task8() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final int COUNT = 100;\r\n\r\n        out.println(\"\\nTask number 8:\");\r\n\r\n        animals.stream().sorted(Comparator.comparing(Animal::getBread)).limit(100).mapToInt(Animal::getAge).max().ifPresent(age -> out.printf(\"Age of oldest animal = %d\\n\", age));\r\n    }\r\n\r\n    /*\r\n    Задача №9\r\n    - Взять всех животных. Преобразовать их в породы, а породы в []char.\r\n    Вывести в консоль длину самого короткого массива.\r\n     */\r\n    private static void task9() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n\r\n        out.println(\"\\nTask number 9:\");\r\n\r\n        animals.stream().map(Animal::getBread).map(String::toCharArray).min(Comparator.comparing(ch -> ch.length)).ifPresent(ch -> out.println(\"Length of the shortest array: \" + ch.length));\r\n\r\n    }\r\n\r\n    /*\r\n    Задача №10\r\n    - Взять всех животных. Подсчитать суммарный возраст всех животных. Вывести результат в консоль.\r\n     */\r\n    private static void task10() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        out.println(\"\\nTask number 10:\");\r\n\r\n        long sumAge = animals.stream().mapToLong(Animal::getAge).sum();\r\n\r\n        out.printf(\"The total age of all animals = %d age\\n\", sumAge);\r\n    }\r\n\r\n    /*\r\n    Задача №11\r\n    - Взять всех животных. Подсчитать средний возраст всех животных из индонезии (Indonesian). Вывести результат в консоль.\r\n     */\r\n    private static void task11() throws IOException {\r\n        List<Animal> animals = Util.getAnimals();\r\n        final String BY_COUNTRY = \"Indonesian\";\r\n\r\n        out.println(\"\\nTask number 11:\");\r\n\r\n        animals.stream().filter(x -> BY_COUNTRY.equalsIgnoreCase(x.getOrigin())).mapToInt(Animal::getAge).average().ifPresent(age -> out.printf(\"Average age of all animals from %s: %.2f\\n\", BY_COUNTRY, age));\r\n    }\r\n\r\n    /*\r\n    Задача №12 -\r\n    Во Французский легион принимают людей со всего света, но есть отбор по полу (только мужчины)\r\n    возраст от 18 до 27 лет. Преимущество отдаётся людям военной категории 1, на втором месте - военная категория 2,\r\n    и на третьем месте военная категория 3. Отсортировать всех подходящих кандидатов в порядке их\r\n    приоритета по военной категории. Однако взять на обучение академия может только 200 человек. Вывести их в консоль.\r\n     */\r\n    private static void task12() throws IOException {\r\n        List<Person> people = Util.getPersons();\r\n        final String BY_GENDER = \"Male\";\r\n        final int MIN_AGE = 18;\r\n        final int MAX_AGE = 27;\r\n        final int COUNT_PERSON = 200;\r\n\r\n        out.println(\"\\nTask number 12:\");\r\n        people.stream()\r\n                .filter(p -> BY_GENDER.equalsIgnoreCase(p.getGender()))\r\n                .filter(age -> MIN_AGE <= ChronoUnit.YEARS.between(age.getDateOfBirth(), LocalDate.now()))\r\n                .filter(age -> MAX_AGE >= ChronoUnit.YEARS.between(age.getDateOfBirth(), LocalDate.now()))\r\n                .sorted(Comparator.comparing(Person::getRecruitmentGroup))\r\n                .limit(COUNT_PERSON)\r\n                .forEach(out::println);\r\n    }\r\n\r\n    /*\r\n    Задача №13 -\r\n    Надвигается цунами и в районе эвакуации требуется в первую очередь обойти дома и эвакуировать больных и раненых\r\n    (из Hospital), во вторую очередь детей и стариков (до 18 и пенсионного возраста), а после всех остальных.\r\n    В первый этап эвакуации мест в эвакуационном транспорте только 500.\r\n    Вывести всех людей попадающих в первый этап эвакуации в порядке приоритета (в консоль).\r\n     */\r\n    private static void task13() throws IOException {\r\n        List<House> houses = Util.getHouses();\r\n        final String BY_FIRST_HOUSE = \"Hospital\";\r\n        final int COUNT_EVACUATION_PLACES = 500;\r\n        final int CHILDREN_AGE = 18;\r\n        final int RETIREMENT_AGE = 60;\r\n\r\n        out.println(\"\\nTask number 13:\");\r\n\r\n//        houses.stream()\r\n//                        .\r\n\r\n        out.println(\"NULL\");\r\n    }\r\n\r\n    /*\r\n    Задача №14 -\r\nИз перечня автомобилей приходящих на рынок Азии логистическому агентству предстоит отсортировать их в порядке следования\r\n1.Туркменистан - 2.Узбекистан - 3.Казахстан - 4.Кыргызстан - 5.Россия - 6.Монголия.\r\nВсе автомобили марки \"Jaguar\" а так же все авто цвета White идут в первую страну.\r\nИз оставшихся все автомобили с массой до 1500 кг и марок BMW, Lexus, Chrysler и Toyota идут во второй эшелон.\r\nИз оставшихся все автомобили Черного цвета с массой более 4000 кг и все GMC и Dodge идут в третий эшелон.\r\nИз оставшихся все автомобили года выпуска до 1982 или все модели \"Civic\" и \"Cherokee\" идут в четвёртый эшелон.\r\nИз оставшихся все автомобили цветов НЕ Yellow, Red, Green и Blue или же по стоимости дороже 40000 в пятый эшелон\r\nИз оставшиеся все автомобили в vin номере которых есть цифра \"59\" идут в последний шестой эшелон.\r\nОставшиеся автомобили отбрасываем, они никуда не идут.\r\nИзмерить суммарные массы автомобилей всех эшелонов для каждой из стран и подсчитать сколько для каждой страны\r\nбудет стоить транспортные расходы если учесть что на 1 тонну транспорта будет потрачено 7.14 $.\r\nВывести суммарные стоимости в консоль. Вывести общую выручку логистической кампании.\r\n     */\r\n    private static void task14() throws IOException {\r\n        List<Car> cars = Util.getCars();\r\n        out.println(\"\\nTask number 14:\");\r\n\r\n        out.println(\"NULL\");\r\n    }\r\n\r\n    /*\r\n    Задача №15 -\r\n    Для оранжереи нужно подобрать растения соответствующие требованиям.\r\n    Во-первых, нужно произвести сложную сортировку каталога растений. Отсортировать их по странам происхождения в обратном порядке\r\n    После по стоимости и еще по водопотреблению в обратном порядке. Из этого списка взять растения название которых\r\n    от буквы \"S\" до буквы \"C\". Если растения тенелюбивые и им подходит горшок из стекла, алюминия или стали - то выбираем их.\r\n    Далее на каждое растение надо рассчитать стоимость растения + стоимость потребления воды за 5 лет c учётом того\r\n    что кубометр воды стоит 1.39 $. Суммировать общую стоимость обслуживания всех растений. Во сколько это обойдётся бюджету?\r\n     */\r\n    private static void task15() throws IOException {\r\n        List<Flower> flowers = Util.getFlowers();\r\n        out.println(\"\\nTask number 15:\");\r\n\r\n        out.println(\"NULL\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/by/sergeev/Main.java b/src/main/java/by/sergeev/Main.java
--- a/src/main/java/by/sergeev/Main.java	(revision b473a2ae07fbb04d7db811b3e53e9f9c5ecafa9e)
+++ b/src/main/java/by/sergeev/Main.java	(date 1676386464046)
@@ -207,13 +207,7 @@
         final int COUNT_PERSON = 200;
 
         out.println("\nTask number 12:");
-        people.stream()
-                .filter(p -> BY_GENDER.equalsIgnoreCase(p.getGender()))
-                .filter(age -> MIN_AGE <= ChronoUnit.YEARS.between(age.getDateOfBirth(), LocalDate.now()))
-                .filter(age -> MAX_AGE >= ChronoUnit.YEARS.between(age.getDateOfBirth(), LocalDate.now()))
-                .sorted(Comparator.comparing(Person::getRecruitmentGroup))
-                .limit(COUNT_PERSON)
-                .forEach(out::println);
+        people.stream().filter(p -> BY_GENDER.equalsIgnoreCase(p.getGender())).filter(age -> MIN_AGE <= ChronoUnit.YEARS.between(age.getDateOfBirth(), LocalDate.now())).filter(age -> MAX_AGE >= ChronoUnit.YEARS.between(age.getDateOfBirth(), LocalDate.now())).sorted(Comparator.comparing(Person::getRecruitmentGroup)).limit(COUNT_PERSON).forEach(out::println);
     }
 
     /*
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"6c866e7f-b2b3-4b6d-9ab8-080cb2df6c3f\" name=\"Changes\" comment=\"feat: Finish Task 12\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/by/sergeev/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/by/sergeev/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/by/sergeev/model/House.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/by/sergeev/model/House.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/by/sergeev/model/Person.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/by/sergeev/model/Person.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"stream-api\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"stream-api\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n              </path>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"stream-api\" type=\"f1a62948:ProjectNode\" />\r\n                <item name=\"Tasks\" type=\"e4a08cd1:TasksNode\" />\r\n                <item name=\"build\" type=\"c8890929:TasksNode$1\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2LczOx99wbaxlrJCyu44WTNzBap\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"SONARLINT_PRECOMMIT_ANALYSIS\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"by.sergeev.Main\" />\r\n      <module name=\"stream-api.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"by.sergeev.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"stream-api [assemble]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"assemble\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"stream-api [build]\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\"build\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.stream-api [build]\" />\r\n        <item itemvalue=\"Gradle.stream-api [assemble]\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"6c866e7f-b2b3-4b6d-9ab8-080cb2df6c3f\" name=\"Changes\" comment=\"\" />\r\n      <created>1676185131249</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1676185131249</updated>\r\n      <workItem from=\"1676185135661\" duration=\"72000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"feat: Next commit\">\r\n      <created>1676306111384</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676306111384</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"feat: Finish Task 11\">\r\n      <created>1676311723155</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676311723155</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"feat: Finish Task 12\">\r\n      <created>1676317834796</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676317834796</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"feat: new Task\" />\r\n    <MESSAGE value=\"feat: Next commit\" />\r\n    <MESSAGE value=\"feat: Finish Task 11\" />\r\n    <MESSAGE value=\"feat: Finish Task 12\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"feat: Finish Task 12\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b473a2ae07fbb04d7db811b3e53e9f9c5ecafa9e)
+++ b/.idea/workspace.xml	(date 1676386565336)
@@ -4,10 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="6c866e7f-b2b3-4b6d-9ab8-080cb2df6c3f" name="Changes" comment="feat: Finish Task 12">
+    <list default="true" id="6c866e7f-b2b3-4b6d-9ab8-080cb2df6c3f" name="Changes" comment="feat: Working Task 13">
       <change beforePath="$PROJECT_DIR$/src/main/java/by/sergeev/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/by/sergeev/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/by/sergeev/model/House.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/by/sergeev/model/House.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/by/sergeev/model/Person.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/by/sergeev/model/Person.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -57,6 +55,7 @@
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="ProjectId" id="2LczOx99wbaxlrJCyu44WTNzBap" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
@@ -70,7 +69,8 @@
   "keyToString": {
     "ASKED_ADD_EXTERNAL_FILES": "true",
     "SONARLINT_PRECOMMIT_ANALYSIS": "true",
-    "WebServerToolWindowFactoryState": "false"
+    "WebServerToolWindowFactoryState": "false",
+    "settings.editor.selected.configurable": "ide.date.format"
   }
 }]]></component>
   <component name="RunManager" selected="Application.Main">
